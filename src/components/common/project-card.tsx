'use client';

import type { Project } from '@/types';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { ExternalLink, Github, Brain } from 'lucide-react';
import { useState, useTransition } from 'react';
import { summarizePortfolioItem, type SummarizePortfolioItemOutput } from '@/ai/flows/portfolio-item-summarization';
import { useToast } from '@/hooks/use-toast';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

interface ProjectCardProps {
  project: Project;
}

export function ProjectCard({ project }: ProjectCardProps) {
  const [isPending, startTransition] = useTransition();
  const [summary, setSummary] = useState<SummarizePortfolioItemOutput | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const { toast } = useToast();

  const handleSummarize = () => {
    setError(null);
    setSummary(null);
    startTransition(async () => {
      try {
        const result = await summarizePortfolioItem({ portfolioItemDescription: project.longDescription });
        setSummary(result);
      } catch (e) {
        console.error("Error summarizing portfolio item:", e);
        setError("Failed to generate summary. Please try again.");
        toast({
          title: "Error",
          description: "Failed to generate summary.",
          variant: "destructive",
        });
      }
    });
  };

  return (
    <Card className="flex flex-col overflow-hidden shadow-lg transition-all duration-300 ease-in-out hover:shadow-xl hover:scale-[1.02]">
      <CardHeader className="p-0">
        <div className="aspect-video relative">
          <Image
            src={project.imageUrl}
            alt={project.title}
            layout="fill"
            objectFit="cover"
            data-ai-hint={project.dataAiHint}
          />
        </div>
      </CardHeader>
      <CardContent className="p-6 flex-grow">
        <CardTitle className="text-xl font-semibold mb-2">{project.title}</CardTitle>
        <CardDescription className="text-sm text-muted-foreground mb-4 min-h-[3rem]">
          {project.description}
        </CardDescription>
        <div className="flex flex-wrap gap-2 mb-4">
          {project.technologies.map((tech) => (
            <Badge key={tech} variant="secondary">{tech}</Badge>
          ))}
        </div>
      </CardContent>
      <CardFooter className="p-6 bg-muted/30 flex flex-col sm:flex-row justify-between items-center gap-3">
        <div className="flex space-x-2">
          {project.liveLink && (
            <Button variant="outline" size="sm" asChild>
              <a href={project.liveLink} target="_blank" rel="noopener noreferrer">
                <ExternalLink className="mr-2 h-4 w-4" /> Live Demo
              </a>
            </Button>
          )}
          {project.sourceLink && (
            <Button variant="outline" size="sm" asChild>
              <a href={project.sourceLink} target="_blank" rel="noopener noreferrer">
                <Github className="mr-2 h-4 w-4" /> Source
              </a>
            </Button>
          )}
        </div>
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button variant="default" size="sm" onClick={handleSummarize} disabled={isPending}>
              <Brain className="mr-2 h-4 w-4" /> AI Summary
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[525px]">
            <DialogHeader>
              <DialogTitle>AI Summary: {project.title}</DialogTitle>
              <DialogDescription>
                This summary is generated by AI based on the project description.
              </DialogDescription>
            </DialogHeader>
            <div className="py-4">
              {isPending && <p className="text-sm text-muted-foreground">Generating summary...</p>}
              {error && (
                <Alert variant="destructive">
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {summary && (
                <p className="text-sm leading-relaxed whitespace-pre-wrap">{summary.summary}</p>
              )}
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsDialogOpen(false)}>Close</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </CardFooter>
    </Card>
  );
}
